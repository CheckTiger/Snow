package cn.sxh.snow.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SNOW_FOX_TABLE".
*/
public class SnowFoxTableDao extends AbstractDao<SnowFoxTable, String> {

    public static final String TABLENAME = "SNOW_FOX_TABLE";

    /**
     * Properties of entity SnowFoxTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SnowFoxChannelName = new Property(0, String.class, "SnowFoxChannelName", true, "SNOW_FOX_CHANNEL_NAME");
        public final static Property SnowFoxChannelId = new Property(1, String.class, "SnowFoxChannelId", false, "SNOW_FOX_CHANNEL_ID");
        public final static Property SnowFoxChannelType = new Property(2, String.class, "SnowFoxChannelType", false, "SNOW_FOX_CHANNEL_TYPE");
        public final static Property SnowFoxChannelSelect = new Property(3, boolean.class, "SnowFoxChannelSelect", false, "SNOW_FOX_CHANNEL_SELECT");
        public final static Property SnowFoxChannelIndex = new Property(4, int.class, "SnowFoxChannelIndex", false, "SNOW_FOX_CHANNEL_INDEX");
        public final static Property SnowFoxChannelFixed = new Property(5, Boolean.class, "SnowFoxChannelFixed", false, "SNOW_FOX_CHANNEL_FIXED");
    };


    public SnowFoxTableDao(DaoConfig config) {
        super(config);
    }
    
    public SnowFoxTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SNOW_FOX_TABLE\" (" + //
                "\"SNOW_FOX_CHANNEL_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: SnowFoxChannelName
                "\"SNOW_FOX_CHANNEL_ID\" TEXT NOT NULL ," + // 1: SnowFoxChannelId
                "\"SNOW_FOX_CHANNEL_TYPE\" TEXT NOT NULL ," + // 2: SnowFoxChannelType
                "\"SNOW_FOX_CHANNEL_SELECT\" INTEGER NOT NULL ," + // 3: SnowFoxChannelSelect
                "\"SNOW_FOX_CHANNEL_INDEX\" INTEGER NOT NULL ," + // 4: SnowFoxChannelIndex
                "\"SNOW_FOX_CHANNEL_FIXED\" INTEGER);"); // 5: SnowFoxChannelFixed
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SNOW_FOX_TABLE_SNOW_FOX_CHANNEL_NAME ON SNOW_FOX_TABLE" +
                " (\"SNOW_FOX_CHANNEL_NAME\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SNOW_FOX_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SnowFoxTable entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSnowFoxChannelName());
        stmt.bindString(2, entity.getSnowFoxChannelId());
        stmt.bindString(3, entity.getSnowFoxChannelType());
        stmt.bindLong(4, entity.getSnowFoxChannelSelect() ? 1L: 0L);
        stmt.bindLong(5, entity.getSnowFoxChannelIndex());
 
        Boolean SnowFoxChannelFixed = entity.getSnowFoxChannelFixed();
        if (SnowFoxChannelFixed != null) {
            stmt.bindLong(6, SnowFoxChannelFixed ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SnowFoxTable entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSnowFoxChannelName());
        stmt.bindString(2, entity.getSnowFoxChannelId());
        stmt.bindString(3, entity.getSnowFoxChannelType());
        stmt.bindLong(4, entity.getSnowFoxChannelSelect() ? 1L: 0L);
        stmt.bindLong(5, entity.getSnowFoxChannelIndex());
 
        Boolean SnowFoxChannelFixed = entity.getSnowFoxChannelFixed();
        if (SnowFoxChannelFixed != null) {
            stmt.bindLong(6, SnowFoxChannelFixed ? 1L: 0L);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public SnowFoxTable readEntity(Cursor cursor, int offset) {
        SnowFoxTable entity = new SnowFoxTable( //
            cursor.getString(offset + 0), // SnowFoxChannelName
            cursor.getString(offset + 1), // SnowFoxChannelId
            cursor.getString(offset + 2), // SnowFoxChannelType
            cursor.getShort(offset + 3) != 0, // SnowFoxChannelSelect
            cursor.getInt(offset + 4), // SnowFoxChannelIndex
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // SnowFoxChannelFixed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SnowFoxTable entity, int offset) {
        entity.setSnowFoxChannelName(cursor.getString(offset + 0));
        entity.setSnowFoxChannelId(cursor.getString(offset + 1));
        entity.setSnowFoxChannelType(cursor.getString(offset + 2));
        entity.setSnowFoxChannelSelect(cursor.getShort(offset + 3) != 0);
        entity.setSnowFoxChannelIndex(cursor.getInt(offset + 4));
        entity.setSnowFoxChannelFixed(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(SnowFoxTable entity, long rowId) {
        return entity.getSnowFoxChannelName();
    }
    
    @Override
    public String getKey(SnowFoxTable entity) {
        if(entity != null) {
            return entity.getSnowFoxChannelName();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
