package cn.sxh.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TECHNOLOGY_TABLE".
*/
public class TechnologyTableDao extends AbstractDao<TechnologyTable, String> {

    public static final String TABLENAME = "TECHNOLOGY_TABLE";

    /**
     * Properties of entity TechnologyTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SnowFoxChannelName = new Property(0, String.class, "SnowFoxChannelName", true, "SNOW_FOX_CHANNEL_NAME");
        public final static Property SnowFoxChannelId = new Property(1, String.class, "SnowFoxChannelId", false, "SNOW_FOX_CHANNEL_ID");
        public final static Property SnowFoxChannelType = new Property(2, String.class, "SnowFoxChannelType", false, "SNOW_FOX_CHANNEL_TYPE");
    };


    public TechnologyTableDao(DaoConfig config) {
        super(config);
    }
    
    public TechnologyTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TECHNOLOGY_TABLE\" (" + //
                "\"SNOW_FOX_CHANNEL_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: SnowFoxChannelName
                "\"SNOW_FOX_CHANNEL_ID\" TEXT NOT NULL ," + // 1: SnowFoxChannelId
                "\"SNOW_FOX_CHANNEL_TYPE\" TEXT NOT NULL );"); // 2: SnowFoxChannelType
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TECHNOLOGY_TABLE_SNOW_FOX_CHANNEL_NAME ON TECHNOLOGY_TABLE" +
                " (\"SNOW_FOX_CHANNEL_NAME\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TECHNOLOGY_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TechnologyTable entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSnowFoxChannelName());
        stmt.bindString(2, entity.getSnowFoxChannelId());
        stmt.bindString(3, entity.getSnowFoxChannelType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TechnologyTable entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSnowFoxChannelName());
        stmt.bindString(2, entity.getSnowFoxChannelId());
        stmt.bindString(3, entity.getSnowFoxChannelType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public TechnologyTable readEntity(Cursor cursor, int offset) {
        TechnologyTable entity = new TechnologyTable( //
            cursor.getString(offset + 0), // SnowFoxChannelName
            cursor.getString(offset + 1), // SnowFoxChannelId
            cursor.getString(offset + 2) // SnowFoxChannelType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TechnologyTable entity, int offset) {
        entity.setSnowFoxChannelName(cursor.getString(offset + 0));
        entity.setSnowFoxChannelId(cursor.getString(offset + 1));
        entity.setSnowFoxChannelType(cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TechnologyTable entity, long rowId) {
        return entity.getSnowFoxChannelName();
    }
    
    @Override
    public String getKey(TechnologyTable entity) {
        if(entity != null) {
            return entity.getSnowFoxChannelName();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
